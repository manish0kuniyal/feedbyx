name: Deploy Lambda Function

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip

      # Install dependencies inside server/ (preferred: npm ci if package-lock.json exists)
      - name: Install server dependencies
        working-directory: server
        run: |
          if [ -f package-lock.json ]; then
            npm ci --production
          else
            echo "package-lock.json not found in server/, using npm install --production as fallback"
            npm install --production
          fi
      - name: Create deployment zip from server
        run: |
          cd server
          zip -r ../code.zip .
          cd ..
          echo "ZIP created; size:"
          ls -lh code.zip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code \
            --function-name "${{ secrets.LAMBDA_FUNCTION_NAME }}" \
            --zip-file fileb://code.zip

      - name: Wait for Lambda update to finish
        run: aws lambda wait function-updated --function-name "${{ secrets.LAMBDA_FUNCTION_NAME }}"

      - name: Update Lambda environment variables (safe with jq)
        run: |
          jq -n --arg mongo "${{ secrets.MONGO_URI }}" \
                --arg host "${{ secrets.REDIS_HOST }}" \
                --arg port "${{ secrets.REDIS_PORT }}" \
                --arg user "${{ secrets.REDIS_USERNAME }}" \
                --arg pass "${{ secrets.REDIS_PASSWORD }}" \
            '{Variables: {MONGO_URI:$mongo, REDIS_HOST:$host, REDIS_PORT:$port, REDIS_USERNAME:$user, REDIS_PASSWORD:$pass}}' > env.json

          cat env.json  # optional: debug, see the JSON file
          
          aws lambda update-function-configuration \
            --function-name "${{ secrets.LAMBDA_FUNCTION_NAME }}" \
            --environment file://env.json \
            --region us-east-1

      - name: Test deployed Lambda (invoke)
        run: |
          printf '{"httpMethod":"GET","path":"/"}' > payload.json
          aws lambda invoke \
            --function-name "${{ secrets.LAMBDA_FUNCTION_NAME }}" \
            --payload file://payload.json response.json \
            --cli-binary-format raw-in-base64-out --region us-east-1
          echo "----- invoke output -----"
          cat response.json || true
